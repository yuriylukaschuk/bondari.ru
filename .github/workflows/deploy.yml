name: Deploy to Production Server # Название workflow

on: # Запускать workflow при пуше в ветку main
  push:
    branches: [ "main" ]

jobs: # Задачи, которые выполнятся
  deploy: # Название задачи (одна задача - один job)
    runs-on: ubuntu-latest # На какой ОС запускать

    steps: # Шаги, которые выполнит job
    # Шаг 1: Получить код из репозитория
    - name: Checkout code
      uses: actions/checkout@v4

    # Шаг 2: Установить SSH-ключ для подключения к серверу
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    # Шаг 3: Выполнить команды на сервере через SSH
    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SSH_HOST }}
        port: ${{ secrets.SSH_PORT }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          # Команды, которые выполнятся на вашем сервере:

          # 1. Переходим в папку проекта
          cd /var/www/bondari.ru

          mkdir check

          # 2. Очищаем место если нужно
          sudo apt-get clean
          composer clear-cache

          # 2. Проверяем наличие Git репозитория
          if [ ! -d ".git" ]; then
            echo "Git repository not found, initializing..."
            git init
            git remote add origin https://github.com/your-username/your-repo.git
          fi

          # 3. Получаем последние изменения из GitHub
          git fetch --all
          git reset --hard origin/main

          # 4. (Опционально) Устанавливаем зависимости, если используете Composer
          # composer install --no-dev --optimize-autoloader --no-progress

          # 5. (Опционально) Для Laravel: обновляем кэш конфига, видов и т.д.
          php artisan optimize:clear
          php artisan view:clear
          php artisan cache:clear
          php artisan route:clear
          php artisan config:clear
          # php artisan migrate --force

          # 6. (Опционально) Для Node.js: устанавливаем зависимости и билдим
          npm ci --only=production
          npm run build

          # 7. (Для Nginx) Перезагружаем сервер, если нужно
          # sudo systemctl reload nginx

          № 8. Ответ от сервера
          echo "Deployment full completed successfully"

